ORCA/C 2.3.0 development
Copyright 1997, Byte Works Inc.
Updated by Stephen Heumann and Kelvin Sherlock, 2017-2025

These release notes document the changes between ORCA/C 2.2.1 and ORCA/C 2.3.0.  For changes between ORCA/C 2.0 and ORCA/C 2.2.1, refer to the ORCA/C 2.2.1 release notes.

-- Change List --------------------------------------------------------------

2.3.0       1.  Bugs squashed.  See bug notes, below.

            2.  New C23 language and library features added.  See
                "New Language Features" and "Library Updates," below.

-- Compiler changes introduced in C 2.3.0 -----------------------------------

New Language Features
---------------------

ORCA/C 2.3.0 has begun adding support for new language features from the recent C23 standard.  To use all available C23 features, select the new "c23" or "c23compat" language modes via the -s option within the cc= portion of the command line.  Some C23 features that are unlikely to cause compatibility problems are also available in other compatibility modes, including the default "c17compat" mode.  Features only available in C23 modes are indicated below.

The following C23 language features are currently implemented:

1.  (C23 modes only) ORCA/C now recognizes the new keywords added in C23.  These are:

   alignas
   alignof
   bool
   constexpr
   false
   nullptr
   static_assert
   thread_local
   true
   typeof
   typeof_unqual
   _BitInt
   _Decimal128
   _Decimal32
   _Decimal64

Of these, alignas, alignof, bool, static_assert, and thread_local are equivalent to the existing _Alignas, _Alignof, _Bool, _Static_assert, and _Thread_local keywords, respectively.  true, false, typeof, and typeof_unqual are described below.  The other new C23 keywords are recognized as keywords, but the corresponding language features are not yet supported, so any attempt to use them will produce an error message.

2.  (C23 modes only) Trigraphs are no longer supported, and character sequences that would have been interpreted as trigraphs can now be used normally, e.g. within string literals.

3.  (C23 modes only) u8-prefixed string literals have an "array of unsigned char" type, rather than "array of char".

3.  static_assert or _Static_assert can now be used in a one-argument form:

   static_assert ( constant-expression ) ;

4.  When a macro taking a variable number of arguments is invoked with no arguments corresponding to the variable portion of the argument list, the final comma may be omitted.  For example, a macro defined like

   #define m(x, ...) /*...*/

may be invoked as

   m(1)

5.  Universal character names (UCNs) within string literals or character constants can now designate any valid Unicode code point, including ASCII characters or control characters.

6.  (C23 modes only) The validity of UCNs within identifiers is now defined based on the XID_Start and XID_Continue Unicode properties.

7.  Attribute specifiers of the form [[ /*...*/ ]] may appear in certain places in declarations and statements, declaring attributes that appertain to various syntactic elements.  ORCA/C currently ignores all attributes.

8.  Labels are no longer restricted to appearing only before statements.  They can now appear before declarations (within a function body) or immediately before the closing } of a compound statement.

9.  Character constants can now have the u8 prefix, indicating UTF-8 encoding.  Such character constants have the type unsigned char.  Unless designated by an octal or hexadecimal escape sequence, the character specified by a u8-prefixed character constant must be one that can be represented by a single UTF-8 code unit, i.e. a character within the 7-bit ASCII character set.

10. The #elifdef and #elifndef preprocessor directives are now supported:

   #elifdef identifier
   #elifndef identifier

The first is equivalent to

   #elif defined identifier

and the second is equivalent to

   #elif !defined identifier

11. (C23 modes only) The new keywords true and false denote predefined constants with type bool and values 1 and 0, respectively.  If true is used in a preprocessor expression, it is replaced with 1, unlike other identifiers or keywords (including false) that are replaced with 0.  This means that true and false can effectively be used as boolean constants within preprocessor expressions, as well as in regular C code.

12. (C23 modes only) Type specifiers using typeof or typeof_unqual are now supported.  They can have the following forms:

   typeof ( expression )
   typeof ( type-name )
   typeof_unqual ( expression )
   typeof_unqual ( type-name )

These can appear wherever type specifiers are used, e.g. in declarations.  The forms with typeof specify either the type of the expression or the type designated by the type name.  The forms with typeof_unqual are similar, except that they will remove any qualifiers (e.g. const or volatile) from the type.

13. (C23 modes only) Type inference is now supported in variable definitions.  This applies to declarations that meet all of the following requirements:

- They contain the storage class specifier auto
- They do not contain any type specifiers
- They contain exactly one declarator, declaring one variable
- The declarator is not a pointer, array, or function declarator
- There is an initializer for the variable
- The initializer is an expression, not enclosed in braces
- There was no previous declaration of the variable in the same scope

In declarations meeting these requirements, the type of the variable is inferred to be the type of the initializer expression, with array or function types converted to pointer types, any qualifiers from the type of the expression removed, and any type qualifiers that appear in the declaration added.

In such declarations, auto effectively acts like a type specifier indicating that the type should be inferred, rather than as a storage class specifier.  Therefore, it may be used even in places where an auto storage class specifier would otherwise not be permitted, such as in declarations at file scope or declarations that contain other storage class specifiers.

For example, the declaration

   static auto x = 123L;

declares the variable x with type long (because that is the type of 123L) and static storage class.

Note that this can change the behavior of code written using the "implicit int" feature of C89/C90, where a declaration with no type specifiers would behave as if the type specifier int was included.  In the "c23compat" language mode, declarations that use auto with no type specifiers but do not meet all the other requirements above will still be processed using the "implicit int" rule.  In "c23" mode or when #pragma lint bit 6 is set, they will produce a lint message.

14. Variable length array types are now supported.  These are array types where the array length expression enclosed in brackets is not an integer constant expression but instead an expression that needs to be evaluated at execution time.  Such array types may occur only in function parameters or within a function body.

The array length expression is normally evaluated when the declaration or type name that contains it appears in the code (or at the beginning of the function, in the case of expressions within function parameter declarations).  It must evaluate to a positive value, and this then determines the size of the array type for as long as it remains in scope.

Functions can be defined as taking variable length array parameters (including multi-dimensional arrays) with the array sizes defined by other function parameters.  Such functions can be used to operate on arrays of various different sizes depending on the parameters passed to them at run time.  This can be useful for functions performing mathematical operations, e.g. matrix multiplies.

Note that ORCA/C does not allow local variables to have variable length array types.  This is an optional feature in the C23 standard, which ORCA/C does not implement.  As an alternative, it is possible to declare a pointer to a variable length array type and then allocate space for the array with malloc() based on the desired size as determined at run time.

15. The #embed preprocessor directive is now supported.  It can have one of these forms:

   #embed "filename" [parameters]
   #embed <filename> [parameters]

The #embed directive embeds the bytes from the specified file into the C source file as a comma separated list of integer constants.  For example, if there is a file "testfile" that contains only the word "hello", then the directive

   #embed "testfile"

will expand to the token sequence 104,101,108,108,111 because those numbers correspond to the ASCII values of the characters 'h', 'e', 'l', 'l', and 'o'.

The two forms of the #embed directive search for a file in the same way as the #include directive would, except that the file is not required to have the SRC file type.  Thus, the form with "filename" looks in the current directory first, while the form with <filename> looks in the ORCACDefs directory first.  As with #include, the search path can be modified with #pragma path.

Either form of the #embed directive may also optionally include one or more parameter clauses of the following forms after the file name:

   limit(expression)
   if_empty(tokens)
   prefix(tokens)
   suffix(tokens)

The limit clause takes an integer constant expression which limits the number of bytes to embed from the file.  The if_empty clause contains an alternate token sequence that will be used if no bytes can be embedded from the file, either because it was empty or because limit(0) was specified.  The prefix and suffix clauses specify extra tokens that will be included before or after those embedded from the file, provided that at least one byte is embedded from the file.  In the token sequences in the if_empty, prefix, and suffix clauses, any parentheses, brackets, or braces must be balanced and properly nested.

The #embed directive is primarily useful for embedding the contents of small files into the C program.  For example, it might be used to embed a small image into the program by using the embedded token sequence from an image file to initialize an array.  Note that embedding large files may cause ORCA/C to run out of memory or encounter other limitations; other approaches such as using resources are generally better in those cases.

The __has_embed preprocessor operator is also available for use within preprocessor expressions.  It is followed by parentheses enclosing a filename and optional parameters, like the arguments for the #embed directive.  It expands to a value that matches one of the following predefined macros, indicating how an #embed directive with the specified filename and parameters would behave:

a) __STDC_EMBED_NOT_FOUND__ (a value of 0), indicating that the file could not be found or an unsupported parameter was used, so a corresponding #embed directive would produce an error
b) __STDC_EMBED_FOUND__ (a value of 1), indicating that the file was found and the corresponding #embed directive would embed one or more bytes from it
c) __STDC_EMBED_EMPTY__ (a value of 2), indicating that the file was found, but the file was empty or limit(0) was specified, so the corresponding #embed directive would not embed any bytes from it


Library Updates
---------------

ORCA/C now includes some new library functions and features specified by the C23 standards:

1.  The <limits.h> and <stdint.h> headers contain new *_WIDTH macros, giving the width (number of value bits) of various integer types.

2.  The function-like macro unreachable() has been added:

#include <stddef.h>
void unreachable(void);

An invocation of this macro indicates that the control-flow path leading to it is unreachable.  This could be used for optimization or to help diagnose errors, but ORCA/C currently ignores it.

3.  The va_start() macro is now defined like:

#include <stdarg.h>
void va_start(va_list ap, ...);

Only the va_list argument is required.  The previously-required second argument giving the name of the last fixed parameter is no longer required and is ignored if present.

-- Bugs from C 2.2.1 that have been fixed in C 2.3.0 ------------------------

1. Constant expressions cast to _Bool, short, or unsigned short would not match the corresponding association in a generic selection expression.

2. A spurious error could be reported if the definition of a function returning a function pointer did not include names for the parameters of the pointed-to function type, e.g.:

   void (*f(void))(int, long) { /*...*/ }

3. Function parameters can now be declared with function types, which get automatically adjusted to function pointers.

4. If a prototype parameter list appeared as part of a type name (e.g. when type casting a function pointer), it would be ignored and treated as if no prototype was provided.
