ORCA/C 2.3.0 development
Copyright 1997, Byte Works Inc.
Updated by Stephen Heumann and Kelvin Sherlock, 2017-2025

These release notes document the changes between ORCA/C 2.2.1 and ORCA/C 2.3.0.  For changes between ORCA/C 2.0 and ORCA/C 2.2.1, refer to the ORCA/C 2.2.1 release notes.

-- Change List --------------------------------------------------------------

2.3.0       1.  New C23 language and library features added.  See
                "New Language Features" and "Library Updates," below.

-- Compiler changes introduced in C 2.3.0 -----------------------------------

New Language Features
---------------------

ORCA/C 2.3.0 has begun adding support for new language features from the recent C23 standard.  To use all available C23 features, select the new "c23" or "c23compat" language modes via the -s option within the cc= portion of the command line.  Some C23 features that are unlikely to cause compatibility problems are also available in other compatibility modes, including the default "c17compat" mode.  Features only available in C23 modes are indicated below.

The following C23 language features are currently implemented:

1.  (C23 modes only) ORCA/C now recognizes the new keywords added in C23.  These are:

   alignas
   alignof
   bool
   constexpr
   false
   nullptr
   static_assert
   thread_local
   true
   typeof
   typeof_unqual
   _BitInt
   _Decimal128
   _Decimal32
   _Decimal64

Of these, alignas, alignof, bool, static_assert, and thread_local are equivalent to the existing _Alignas, _Alignof, _Bool, _Static_assert, and _Thread_local keywords, respectively.  The other new C23 keywords are recognized as keywords, but the corresponding language features are not yet supported, so any attempt to use them will produce an error message.

2.  (C23 modes only) Trigraphs are no longer supported, and character sequences that would have been interpreted as trigraphs can now be used normally, e.g. within string literals.

3.  (C23 modes only) u8-prefixed string literals have an "array of unsigned char" type, rather than "array of char".

3.  static_assert or _Static_assert can now be used in a one-argument form:

   static_assert ( constant-expression ) ;

4.  When a macro taking a variable number of arguments is invoked with no arguments corresponding to the variable portion of the argument list, the final comma may be omitted.  For example, a macro defined like

   #define m(x, ...) /*...*/

may be invoked as

   m(1)

5.  Universal character names (UCNs) within string literals or character constants can now designate any valid Unicode code point, including ASCII characters or control characters.

6. (C23 modes only) The validity of UCNs within identifiers is now defined based on the XID_Start and XID_Continue Unicode properties.

7. Attribute specifiers of the form [[ /*...*/ ]] may appear in certain places in declarations and statements, declaring attributes that appertain to various syntactic elements.  ORCA/C currently ignores all attributes.


Library Updates
---------------

ORCA/C now includes some new library functions and features specified by the C23 standards:

1.  The <limits.h> and <stdint.h> headers contain new *_WIDTH macros, giving the width (number of value bits) of various integer types.

2.  The function-like macro unreachable() has been added:

#include <stddef.h>
void unreachable(void);

An invocation of this macro indicates that the control-flow path leading to it is unreachable.  This could be used for optimization or to help diagnose errors, but ORCA/C currently ignores it.

3.  The va_start() macro is now defined as:

#include <stdarg.h>
void va_start(va_list ap, ...);

Only the va_list argument is required.  The previously-required second argument giving the name of the last fixed parameter is no longer required and is ignored if present.
